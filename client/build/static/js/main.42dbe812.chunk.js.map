{"version":3,"sources":["views/Main.js","views/Viewpet.js","components/Input.js","components/PetForm.js","views/Update.js","views/Add.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","pets","setPets","useEffect","axios","get","then","res","data","to","className","map","p","idx","key","name","type","onClick","navigate","_id","Viewpet","id","pettoview","setPetToView","style","width","marginLeft","catch","err","skillthree","likes","skillone","skilltwo","delete","removePet","e","put","Input","label","value","error","handleChange","onChange","PetForm","handleSubmit","errors","form","buttontext","onSubmit","message","description","Update","petToedit","setPetToEdit","setErrors","Axios","preventDefault","target","response","Add","newPet","setNewPet","post","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.42dbe812.chunk.js","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {Link, navigate} from '@reach/router';\n\nconst Main =(props) =>{\n\n    const [pets, setPets]= useState([]);\n   \n\n    //make api call to retrieve all pets\n    useEffect(()=>{\n        axios.get('http://localhost:8000/api/pet')\n        .then(res=>{\n            setPets(res.data);\n\n        })\n    }, []);\n\n    \n\n\n    return(\n        <div>\n            <h1>Welcome to Ari's Pet Shelter</h1>\n            <h2><Link to=\"/pets/new\">Add Pet to Shelter</Link></h2>\n            <h4>Give the following pets a home!</h4>\n\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>Pet Name</th>\n                        <th>Pet Type</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {\n                        pets.map((p, idx)=>{\n                            return(\n                                <tr key={idx}>\n                                    <td>{p.name}</td>\n                                    <td>{p.type}</td>\n                                    <td><button onClick={() => navigate(`/pets/${p._id}`)}>Details</button>|<button onClick={() => navigate(`/edit/${p._id}`)}>Edit</button></td>\n\n                                </tr>\n                                )\n                            }\n                        )\n                    }\n\n                </tbody>\n\n            </table>\n\n\n\n\n\n        </div>\n\n    );\n}\n\nexport default Main;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {navigate} from '@reach/router';\n\nconst Viewpet = ({id})=>{\n\nconst [pettoview, setPetToView]= useState({});\n\n\nconst removePet =(id)=>{\n    axios.delete(`http://localhost:8000/api/pets/${id}`)\n    .then(res=>{\n        navigate('/pets');\n        // setIsRemoved(true);\n    })\n}\n\nconst style= {\n    width: \"200px\",\n    marginLeft: \"45%\"\n}\n\nuseEffect(()=>{\n    axios.get(`http://localhost:8000/api/pets/${id}`)\n    .then(res=>{\n        setPetToView(res.data)\n        \n    })\n    .catch(err=>navigate('/pets'));\n}, []);\n\nconst handleLike = (e)=>{\n    setPetToView({\n        ...pettoview,\n        [pettoview.likes]: (pettoview.likes)+1})\n    axios.put(`http://localhost:8000/api/pets/${id}`,pettoview)\n    .then(res=> axios.get(`http://localhost:8000/api/pets/${id}`)\n        .then(res => setPetToView(res.data))\n    )\n       \n\n        \n}\n\n\nconst skillthree= pettoview.skillthree\nreturn(\n    <div>\n        \n        <button className=\"btn btn-dark\" onClick={() => navigate(\"/pets\")}>Home</button>\n        <h1>Pet Information for:  {pettoview.name}</h1>\n        <h3>Pet Name: {pettoview.name}</h3>\n        <h3>Pet Type: {pettoview.type}</h3>\n        <h2>Pet Likes: {pettoview.likes}</h2>\n        <h3>What kinds of things can this Pet do??</h3>\n        <ul>\n            <li style={style}>{pettoview.skillone}</li>\n            <li style={style}>{pettoview.skilltwo}</li>\n            \n            <li style={style}>{pettoview.skillthree}</li>\n            \n           \n        </ul>\n\n        <button className=\"btn btn-success\" onClick={() => removePet(id)}>Adopt this Pet</button>\n        <button className=\"btn btn-success\" onClick={(e) => handleLike()}>Like this Pet</button>\n\n\n    </div>\n\n\n);\n\n\n\n\n\n}\nexport default Viewpet;","import React from 'react';\n\n\nconst Input = ({type, name, label, value, error, handleChange})=>{\n    return(\n        <div>\n            <span>{error}</span><br />\n            <label>{label}</label><br />\n            <input name={name} type= {type} value={value} label= {label} error={error} onChange = {(e)=>handleChange(e)}/>\n\n\n\n\n        </div>\n\n    )\n}\nexport default Input;","import React from 'react';\nimport Input from './Input';\n\n\n\nconst PetForm = ({handleChange, handleSubmit, errors, form, buttontext})=>{\n    return(\n        <form className=\"form-group\" onSubmit = {(e)=>handleSubmit(e)}>\n            <Input\n            label= \"Pet Name: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.name}\n            name=\"name\"\n            error={errors.name!=null? errors.name.message:\"\"}\n            \n            \n            />\n            <Input\n            label= \"Pet Type: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.type}\n            name=\"type\"\n            error={errors.type!=null? errors.type.message:\"\"}\n            \n            \n            />\n\n            <Input\n            label= \"Pet Description: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.description}\n            name=\"description\"\n            error={errors.description!=null? errors.description.message:\"\"}\n            \n            \n            />  \n\n            <Input\n            label= \"Skill 1: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.skillone}\n            name=\"skillone\"\n            error={errors.skillone!=null? errors.skillone.message:\"\"}\n            \n            \n            />  \n\n            <Input\n            label= \"Skill 2: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.skilltwo}\n            name=\"skilltwo\"\n            error={errors.skilltwo!=null? errors.skilltwo.message:\"\"}\n            \n            \n            />  \n\n            <Input\n            label= \"Skill 3: \"\n            type= \"text\"\n            handleChange = {handleChange}\n            value = {form.skillthree}\n            name=\"skillthree\"\n            error={errors.skillthree!=null? errors.skillthree.message:\"\"}\n            \n           \n            />  \n             <input className= \"btn btn-success\" type=\"submit\" value={buttontext}/>\n\n\n\n\n        </form>\n\n\n    );\n\n\n\n}\n\nexport default PetForm;","import React, {useState, useEffect} from 'react';\nimport Axios from 'axios';\nimport {navigate} from '@reach/router';\nimport PetForm from '../components/PetForm';\n\n\n\nconst Update = ({id})=>{\n\n    const [petToedit, setPetToEdit] = useState({});\n    const [errors, setErrors] = useState({\n        name:\"\",\n        type:\"\",\n        description:\"\"\n\n    })\n\n    useEffect(()=>{\n        Axios.get(`http://localhost:8000/api/pets/${id}`)\n        .then(res=>setPetToEdit(res.data))\n        .catch(err=>navigate('/pets'))\n\n    }, [])\n\n    const handleLike= (e)=>{\n        e.preventDefault();\n        Axios.get(`http://localhost:8000/api/pets/${id}`)\n        .then(res=>setPetToEdit(res.data))\n        setPetToEdit({\n            ...petToedit,\n            [e.target.likes]: e.target.likes+1})\n           \n        .then(Axios.put(`http://localhost:8000/api/pets/${id}`, petToedit))\n            \n    }\n\n\n        \n    \n    const handleChange = (e)=>{\n        e.preventDefault();\n        setPetToEdit({\n            ...petToedit,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        Axios.put(`http://localhost:8000/api/pets/${id}`, petToedit)\n        .then(res=>navigate(`/pets/${id}`))\n        .catch(err=>{\n            setErrors(err.response.data)});\n    }\n\n\n    return(\n\n        <div>\n            <h1>You Want to Update {petToedit.name}'s information?</h1>\n            <h2>Sure, go right ahead</h2>\n            <PetForm\n            handleChange={handleChange}\n            handleSubmit={handleSubmit}\n            form={petToedit}\n            buttontext=\"Update Pet Info\"\n            errors= {errors}\n            \n            />\n            <button className=\"btn btn-danger\" onClick={(e)=>navigate('/pets')}>Cancel</button>\n        </div>\n    )\n\n\n\n}\n\nexport default Update;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport { navigate} from '@reach/router';\nimport PetForm from '../components/PetForm';\n\n\nconst Add = (props)=>{\n    const [newPet, setNewPet]= useState({\n        name:\"\",\n        type:\"\",\n        description:\"\",\n        skillone:\"\",\n        skilltwo:\"\",\n        skillthree:\"\"\n    });\n\n    const [errors, setErrors]=useState({\n        name:\"\",\n        type:\"\",\n        description:\"\"\n\n    })\n\n    const handleChange=(e)=>{\n        e.preventDefault();\n        setNewPet({\n            ...newPet,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/pet', newPet)\n        .then(res=>{\n            setNewPet({\n                name:\"\",\n                type:\"\",\n                description:\"\",\n                skillone:\"\",\n                skilltwo:\"\",\n                skillthree:\"\"\n\n            })\n        })\n        .then(res=>navigate(\"/pets\"))\n        .catch(err=>{\n            setErrors(err.response.data);\n        })\n    }\n\n\n    return(\n        <div>\n            <h2> You Can Add a Pet Here!</h2><br/>\n            <PetForm\n            buttontext= \"Add Pet\"\n            form = {newPet}\n            handleChange = {handleChange}\n            handleSubmit = {handleSubmit}\n            errors = {errors!= null? errors:\"\"} \n            />\n            <button className=\"btn btn-danger\" onClick={(e)=>navigate('/pets')}>Cancel</button>\n        </div>\n    )\n}\n\nexport default Add;\n\n","import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Router} from '@reach/router';\nimport Main from './views/Main';\nimport Viewpet from './views/Viewpet';\nimport Update from './views/Update';\nimport Add from './views/Add';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    <Router>\n    <Main path=\"/pets\"/>\n    <Add path=\"/pets/new\"/>\n    <Viewpet path=\"/pets/:id\"/>\n    <Update path=\"/edit/:id\" />\n\n    </Router>\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}